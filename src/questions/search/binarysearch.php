<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>binarysearch</title>
  <link rel="stylesheet" type="text/css" href="stylesheet.css">
</head>
<body>

  <?php
    // $aに数字の配列が格納されています。
    // ２分探索の過程を出力するプログラムを書いて下さい。

    // ex 配列に0~20の値を格納し、16を探索する場合
    // 0が左端の番号です。10が真ん中の番号です。20が右端の番号です。
    // 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
    // 10と16を比較します。
    // 一致しません。
    // 11が左端の番号です。15が真ん中の番号です。20が右端の番号です。
    // 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
    // 15と16を比較します。
    // 一致しません。
    // 16が左端の番号です。18が真ん中の番号です。20が右端の番号です。
    // 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
    // 18と16を比較します。
    // 一致しません。
    // 16が真ん中の番号です。16が左端の番号です。17が右端の番号です。
    // 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
    // 16と16を比較します。
    // 一致しました。終了します。
    // 見つかった番号=16
    // ※上の出力はあくまで例です。ご自分でわかりやすい出力に書き換えて下さっても構いません。

    // 検索するソート済みの配列データです
    $a = range(0, 20);
    // 探す値です
    $searchValue = 16;
    // 見つかったデータの配列番号です。初期値は、エラーの値（-1）にしておきます
    $findID = -1;
    
    // 調べる左端の番号です
    $left = 0;
    // 調べる右端の番号です
    $right = count($a)-1;
    // 調べる左端と右端の間にデータがある間は、くり返します
    while($left <= $right) {
      
      // 左右の真ん中の番号を調べる位置にします
      $middle = floor(($left + $right) / 2);

      // 調べる位置の値と、探す値を比較して
      if ($a[$middle] == $searchValue) {
        // 同じなら、その番号を保存してくり返しを終了します
        $findID = $middle;
        break;
      } else if ($a[$middle] < $searchValue) {
        // 探す値より小さければ、そこより左に探すデータはないので、左端を移動します
        $left = $middle + 1;
      } else {
        // 探す値より大きければ、そこより右に探すデータはないので、右端を移動します
        $right = $middle - 1;
      }
    }

	// 検索結果を表示します
  print("見つかった番号=".$findID);
  
?>

</body>
</html>